{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBar.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","gender","height","mass","birth_year","className","id","CardList","list","map","people","key","SearchBar","type","placeholder","App","props","state","peopleList","getData","a","fetch","request","json","data","results","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qYAmBeA,MAdf,YAA2D,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAC1C,OACE,yBAAKC,UAAU,kDAAkDC,GAAG,QAClE,wBAAID,UAAU,IAAd,SACQ,0BAAMA,UAAU,kBAAkBL,IAE1C,sCAAYC,GACZ,sCAAYC,GACZ,sCAAYC,GACZ,0CAAgBC,K,MCePG,MAzBf,YAA6B,IAATC,EAAQ,EAARA,KAClB,OAAKA,EAQD,yBAAKH,UAAU,uCACZG,EAAKC,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CACEC,IAAKD,EAAOV,KACZA,KAAMU,EAAOV,KACbC,OAAQS,EAAOT,OACfC,OAAQQ,EAAOT,OACfE,KAAMO,EAAOP,KACbC,WAAYM,EAAON,iBAdzB,wBAAIE,GAAG,UAAUD,UAAU,8BAA3B,YCQSO,MAbf,WACE,OACE,6BACE,2BACEP,UAAU,8BACVQ,KAAK,SACLb,KAAK,YACLc,YAAY,4BCgCLC,G,MApCf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,WAAY,IAJG,EADrB,gEASuB,IAAD,gBACHC,IADG,2EAClB,gCAAAC,EAAA,sEACwBC,MAAM,iCAD9B,cACQC,EADR,gBAEqBA,EAAQC,OAF7B,cAEQC,EAFR,OAGQhB,EAAOgB,EAAKC,QAHpB,kBAISjB,GAJT,4CADkB,sBAOlB,sBAAC,4BAAAY,EAAA,sEACoBD,IADpB,OACOX,EADP,OAEC,EAAKkB,SAAS,CAAER,WAAYV,IAF7B,0CAAD,KAhBJ,+BAsBY,IACAU,EAAeS,KAAKV,MAApBC,WACR,OACE,yBAAKb,UAAU,IACb,wBAAIA,UAAU,yCAAyCC,GAAG,SAA1D,gCAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUE,KAAMU,SA9BxB,GAAyBU,cCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b44acc63.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../output.css\";\nimport \"./SearchBar.css\";\nimport \"./Card.css\";\n\nfunction Card({ name, gender, height, mass, birth_year }) {\n  return (\n    <div className=\"shadow-outline font-mono m-4 md:w-64 h-auto p-4\" id=\"card\">\n      <h1 className=\"\">\n        Name: <span className=\"font-extrabold\">{name}</span>\n      </h1>\n      <p>Gender: {gender}</p>\n      <p>Height: {height}</p>\n      <p>Weight: {mass}</p>\n      <p>Birth year: {birth_year}</p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"./CardList.css\";\n\nfunction CardList({ list }) {\n  if (!list) {\n    return (\n      <h2 id=\"loading\" className=\"text-3xl text-center mt-10\">\n        Loading\n      </h2>\n    );\n  } else {\n    return (\n      <div className=\"md:flex md:flex-wrap justify-evenly\">\n        {list.map((people) => (\n          <Card\n            key={people.name}\n            name={people.name}\n            gender={people.gender}\n            height={people.gender}\n            mass={people.mass}\n            birth_year={people.birth_year}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CardList;\n","import React from \"react\";\n\nfunction SearchBar() {\n  return (\n    <div>\n      <input\n        className=\"bg-blue-200 p-4 m-auto flex\"\n        type=\"search\"\n        name=\"searchBox\"\n        placeholder=\"Search for characters\"\n      />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBar\";\nimport \"./App.css\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      peopleList: [],\n    };\n  }\n\n  componentDidMount() {\n    async function getData() {\n      const request = await fetch(\"https://swapi.dev/api/people/\");\n      const data = await request.json();\n      const list = data.results;\n      return list;\n    }\n    (async () => {\n      const list = await getData();\n      this.setState({ peopleList: list });\n    })();\n  }\n\n  render() {\n    const { peopleList } = this.state;\n    return (\n      <div className=\"\">\n        <h1 className=\"text-base md:text-3xl text-center m-2 \" id=\"title\">\n          Star Wars Character Database\n        </h1>\n        <SearchBox />\n        <CardList list={peopleList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}